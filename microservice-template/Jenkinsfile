//Template fuer einen Microservice "Exampleservice"
//Import der Shared Library, um weitere Funktionen nutzen zu koennen
@Library('github.com/kekru-cd-microservice-swarm-example/jenkins-shared@master')
import steps.CDMain

//Variablen deklarieren
def cdMain
def exampleservicePort
def exampleserviceImageName
def borderproxyPort
def stack

try{
    node {
        //Git Repo laden und Shared Library initiieren
        stage('Preparation') {
            git 'https://github.com/kekru-cd-microservice-swarm-example/exampleservice'

            cdMain = new CDMain(steps)
            cdMain.init()
        }

        stage('Build') {
            //Compile, UnitTests und Artifakte generieren, z.B. mit mvn package
            sh './mvnw package'
            //Docker Image erzeugen und in die Docker Registry pushen. Rueckgabe ist vollstaendiger Name des Image
            exampleserviceImageName = cdMain.buildAndPush('exampleservice', './pfad/zu/Dockerfile')
        }

        stage('Starte Testumgebung') {
            //start der Testumgebung
            stack = cdMain.startTestenvironment()
            //Aktualisierung des Exampleservice
            sh './docker service update --replicas 1 --image ' + exampleserviceImageName + ' ' + stack.fullServiceName('exampleservice')

            //Port des Reverse-Proxy ermitteln
            borderproxyPort = stack.getBorderproxyPort()
            //Port des Exampleservice ermitteln
            exampleservicePort = stack.getPublishedPort('exampleservice', 8080)
            echo '8080 -> ' + exampleservicePort
            //Warten bis Exampleservice bereit ist
            cdMain.waitForTCP(exampleservicePort)
        }
       
        stage('Integrationtests') {
            //Integrationstests starten, z.B. mit Maven
            sh './mvnw test-compile surefire:test@run-intagrationtests -Dhost=manager1 -Dport=' + exampleservicePort            
        }
    }

    stage ('Manuelle Tests'){
        //Auf Nutzereingabe warten nach den manuellen Tests
        def userInput = input(
            id: 'userInput', message: 'Testversion erreichbar unter http://10.1.6.210:'+borderproxyPort+'/newspage/ Live Deployment?'
        )

    }

}finally{    
    node {
        stage ('Entferne Testumgebung'){
            //Nach den manuellen Tests wird die Testumgebung entfernt
            stack.removeStack()
        }
    }
}

node {
    stage ('Live Deployment'){
        //Wurde die Pipeline nicht durch die Benutzereingabe abgebrochen, wird die neue Version auf dem Produktivsystem deployt
        cdMain.deployInProduction('exampleservice', exampleserviceImageName)
    }
}
